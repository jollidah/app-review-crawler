name: Build and Release Binaries

permissions:
  contents: write    # permission required for release, artifacts upload, etc.

on:
  push:
    branches:
      - 'release/v*'
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Test mode (no actual release)'
        required: false
        default: 'false'
        type: boolean
  pull_request:
    branches:
      - 'main'
      - 'develop'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    env:
      BINARY_NAME: app-review-crawler

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Cargo registry and git index
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-registry-

      - name: Cache build output
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-target-

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Add target
        run: rustup target add ${{ matrix.target }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package (Unix/macOS)
        if: runner.os != 'Windows'
        run: |
          # Clean dist directory first
          rm -rf dist
          mkdir -p dist
          mkdir -p dist/${{ matrix.target }}
          
          # Debug: list what's in the target directory
          ls -la target/${{ matrix.target }}/release/
          
          # Copy the binary (handle different possible names)
          if [ -f "target/${{ matrix.target }}/release/app-review-crawler" ]; then
            cp target/${{ matrix.target }}/release/app-review-crawler dist/${{ matrix.target }}/
          elif [ -f "target/${{ matrix.target }}/release/app-review-crawler.exe" ]; then
            cp target/${{ matrix.target }}/release/app-review-crawler.exe dist/${{ matrix.target }}/
          else
            echo "Error: Binary not found in target/${{ matrix.target }}/release/"
            exit 1
          fi
          
          # Debug: list what's in dist directory
          ls -la dist/${{ matrix.target }}/
          
          # Create tar.gz with version number for release
          tar czf dist/app-review-crawler-${{ github.ref_name }}-${{ matrix.target }}.tar.gz -C dist/${{ matrix.target }} .
          
          # Also create version-less file for latest links
          tar czf dist/app-review-crawler-${{ matrix.target }}.tar.gz -C dist/${{ matrix.target }} .
          
          # Debug: list created files
          ls -la dist/*.tar.gz

      - name: Package (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Clean dist directory first
          if (Test-Path dist) { Remove-Item -Recurse -Force dist }
          New-Item -ItemType Directory -Path dist\${{ matrix.target }} -Force | Out-Null
          
          Copy-Item target\${{ matrix.target }}\release\app-review-crawler.exe dist\${{ matrix.target }}\
          
          Compress-Archive -Path dist\${{ matrix.target }}\* -DestinationPath dist\app-review-crawler-${{ github.ref_name }}-${{ matrix.target }}.zip -Force
          Compress-Archive -Path dist\${{ matrix.target }}\* -DestinationPath dist\app-review-crawler-${{ matrix.target }}.zip -Force

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-${{ matrix.target }}
          path: dist/**

  publish:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/release/')
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create Release and Upload
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          artifacts: 'dist/**/*'
