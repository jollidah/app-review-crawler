name: Build and Release Binaries

on:
  push:
    branches:
      - 'release/v*'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    env:
      BINARY_NAME: app-review-crawler

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Cargo registry and git index
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-registry-

      - name: Cache build output
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-target-

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Add target
        run: rustup target add ${{ matrix.target }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package (Unix/macOS)
        if: runner.os != 'Windows'
        run: |
          TAG=${GITHUB_REF#refs/heads/release/}

          mkdir -p dist/${{ matrix.target }}
          cp target/${{ matrix.target }}/release/${{ env.BINARY_NAME }} dist/${{ matrix.target }}/
          tar czf dist/${{ env.BINARY_NAME }}-${TAG}-${{ matrix.target }}.tar.gz \
            -C dist/${{ matrix.target }} .

      - name: Package (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # remove refs/heads/release/ prefix
          $TAG = "${Env:GITHUB_REF}" -replace '^refs/heads/release/',''

          # create dist/<target> 
          New-Item -ItemType Directory -Path dist\${{ matrix.target }} -Force | Out-Null

          # copy binary
          Copy-Item target\${{ matrix.target }}\release\${{ env.BINARY_NAME }}.exe `
            -Destination dist\${{ matrix.target }}\

          # zip with no slash in TAG
          $zipPath = "dist\${{ env.BINARY_NAME }}-$TAG-${{ matrix.target }}.zip"
          Compress-Archive -Path dist\${{ matrix.target }}\* -DestinationPath $zipPath

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-${{ matrix.target }}
          path: dist/**

  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          artifacts: dist/**
